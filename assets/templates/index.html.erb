<html>
  <head>
    <title>leaflet-gpx demo</title>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
    <link rel="stylesheet" href="https://rawgit.com/MrMufflon/Leaflet.Elevation/master/dist/leaflet.elevation-0.0.4.css" />
    <style type="text/css">
      body { width: 1000px; margin: 0 auto; }
      .gpx { border: 5px #aaa solid; border-radius: 5px;
        box-shadow: 0 0 3px 3px #ccc;
        width: 1000px; margin: 1em auto; }
      .gpx .map { border: 1px #888 solid; border-left: none; border-right: none;
        width: 1000px; height: 500px; margin: 0; }
      .gpx footer { background: #f0f0f0; padding: 0.5em; }
      .gpx ul.info { list-style: none; margin: 0; padding: 0; font-size: smaller; }
      .gpx ul.info li { color: #666; padding: 2px; display: inline; }
      .gpx ul.info li span { color: black; }
    </style>
  </head>
  <body>
    <section id="demo" class="gpx" data-gpx-source="http://localhost:8081/mckerrow.gpx" data-map-target="demo-map">
      <article>
        <div class="map" id="demo-map"></div>
      </article>

      <footer>
        <ul class="info">
          <li>Distance:&nbsp;<span class="distance"></span>&nbsp;km</li>
          &mdash; <li>Moving duration:&nbsp;<span class="duration"></span></li>
          &mdash; <li>Average speed:&nbsp;<span class="average-speed"></span>&nbsp;km/h</li>
          &mdash; <li>Elevation:&nbsp;+<span class="elevation-gain"></span>&nbsp;m, -<span class="elevation-loss"></span>&nbsp;m</li>
        </ul>
      </footer>
    </section>

    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js"></script>
    <script src="https://rawgithub.com/mpetazzoni/leaflet-gpx/master/gpx.js"></script>
    <script type="text/javascript" src="https://rawgit.com/MrMufflon/Leaflet.Elevation/master/dist/leaflet.elevation-0.0.4.min.js"></script>
    <script type="application/javascript">
      function _t(t) { return document.getElementsByTagName(t)[0]; }
      function _c(c) { return document.getElementsByClassName(c)[0]; }
      function round(number) { return Math.round(number * 100) / 100; }
      function format_duration(seconds) {
        var result = "";
        var hours   = Math.floor(seconds / 3600);
        var minutes = Math.floor((seconds - (hours * 3600)) / 60);

        if (hours == 1) { result += hours + " hour"; }
        else if (hours > 0) { result += hours + " hours";}

        if (hours > 0 && minutes > 0) { result += " and "; }

        if (minutes == 1) { result += hours + " minute"; }
        if (minutes > 0) {result += minutes + " minutes"; }

        return result;
      }

      var map = new L.Map('demo-map');

      var url = 'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg';
      var attribution = '<a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors</a>';
      var tileLayer = new L.TileLayer(url, {subdomains:"1234",attribution: attribution});

      var geojson = <%= @geo_json %>;

      var elevation = L.control.elevation({
        position: "topright",
        theme: "steelblue-theme",
        width: 600,
        height: 125,
        margins: {
            top: 10,
            right: 20,
            bottom: 30,
            left: 50
        },
        useHeightIndicator: true, //if false a marker is drawn at map position
        interpolation: "linear", //see https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-area_interpolate
        hoverNumber: {
            decimalsX: 3, //decimals on distance (always in km)
            decimalsY: 0, //deciamls on height (always in m)
            formatter: undefined //custom formatter function may be injected
        },
        xTicks: undefined, //number of ticks in x axis, calculated by default according to width
        yTicks: undefined, //number of ticks on y axis, calculated by default according to height
        collapsed: false    //collapsed mode, show chart on click or mouseover
      });
      elevation.addTo(map);

      var gjl = L.geoJson(geojson,{ onEachFeature: function(feature, layer) { elevation.addData.bind(elevation)(feature, layer); } }).addTo(map);

      map.addLayer(tileLayer).fitBounds(gjl.getBounds());

      _c('distance').textContent = round(geojson.properties.distance / 1000);
      _c('duration').textContent = format_duration(geojson.properties.moving_duration);
      _c('average-speed').textContent = round(geojson.properties.average_moving_speed);
      _c('elevation-gain').textContent = round(geojson.properties.uphill_elevation);
      _c('elevation-loss').textContent = -1 * round(geojson.properties.downhill_elevation);
    </script>
  </body>
</html>
